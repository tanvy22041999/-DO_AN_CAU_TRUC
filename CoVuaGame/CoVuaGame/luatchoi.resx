<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>Cách Đi Một quân đang tấn công một quân của đối phương khi quân đó thực hiện bắt quân đang ở tại cô cờ đó
.Quân Tượng được quyền đi tới bất cứ ô cờ nào trên cùng đường chéo mà nó đang đứng
Quân Hậu được quyền đi tới bất cứ ô cờ nào trên cùng cột dọc, hàng ngang hoặc đường chéo từ vị trí của nó.
Quân Xe được quyền đi tới bất cứ ô cờ nào trên cùng cột dọc, hàng ngang 
Quân Mã được quyền đi từ ô vị trí hiện tại đến một trong các ô gần nhất không nằm trên cùng hàng ngang, cột dọc hay đường chéo với ô nó đang đứng.quân Mã được phép nhảy qua ô có quân đang đứng.
Quân Tốt có thể đi tới một ô cờ trống ngay phía trước nó, trên cùng cột dọc hoặc một trong các trường hợp sau:
Ở nước đi đầu tiên, quân Tốt có thể đi như điểm trên hoặc tiến hai ô cờ trên cùng cột dọc với điều kiện cả hai ô cờ đó đều trống, hoặc:Quân Tốt có thể đi theo đường chéo tới một ô cờ ngay phía trước nó trên cột dọc. Bên cạnh nó đang bị một quân của đối phương chiếm giữ và bắt quân này.
Khi một quân Tốt tiến tới hàng ngang cuối cùng thì phải được đổi thành một trong các quân Hậu, hoặc Xe, hoặc Tượng, hoặc Mã cùng màu, ngay trong nước đi đó.
Quân Vua Có Thể đi phạm vi 1 ô  nào trên cùng cột dọc, hàng ngang hoặc đường chéo từ vị trí của nó.
</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Luật Cờ vua quy định một bàn cờ vua gồm 64 ô vuông bằng nhau, các ô màu trắng và màu đen được đắt xen kẽ nhau. Bàn cờ được đặt ở giữa hai đấu thủ sao cho ô góc bên phải của đấu thủ phải là ô màu trắng.Trước khi bắt đầu ván cờ, một đấu thủ có 16 quân cờ trắng và người còn lại có 16 quân cờ đen. Mỗi bên đen – trắng bao gồm: 01 Vua, 01 Hậu, 02 Xe, 02 Tượng, 02 Mã, 08 Tốt.</value>
  </data>
</root>